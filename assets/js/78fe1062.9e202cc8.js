"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["9901"],{8075:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>l,default:()=>h,assets:()=>a,toc:()=>c,frontMatter:()=>s});var i=JSON.parse('{"id":"cli/tnctl_verify_revision","title":"tnctl verify revision","description":"tnctl verify revision","source":"@site/docs/terranetes-controller/cli/tnctl_verify_revision.md","sourceDirName":"cli","slug":"/cli/tnctl_verify_revision","permalink":"/terranetes-controller/cli/tnctl_verify_revision","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/cli/tnctl_verify_revision.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161829000,"frontMatter":{"title":"tnctl verify revision"},"sidebar":"tutorialSidebar","previous":{"title":"tnctl verify","permalink":"/terranetes-controller/cli/tnctl_verify"},"next":{"title":"tnctl workflow","permalink":"/terranetes-controller/cli/tnctl_workflow"}}'),r=n("5893"),o=n("65");let s={title:"tnctl verify revision"},l=void 0,a={},c=[{value:"tnctl verify revision",id:"tnctl-verify-revision",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function d(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"tnctl-verify-revision",children:"tnctl verify revision"}),"\n",(0,r.jsx)(t.p,{children:"Performs a series of checks against a Revision to ensure it is ready for use"}),"\n",(0,r.jsx)(t.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(t.p,{children:"Performs a series of checks against the Revision to ensure the configuration is\nvalid and it will work with the within the cluster. This command uses the current\nkubeconfig context to retrieve details such as Provider/s, Policies and Contexts."}),"\n",(0,r.jsx)(t.p,{children:"Verify the revision will work in the cluster\n$ tnctl verify revision revision.yaml"}),"\n",(0,r.jsx)(t.p,{children:"We can also include additional files such as Contexts, Policies and Plans. This can\nbe useful if you want to test a revision against a specific context or policy, before\napplying it to the cluster.\n$ tnctl verify revision revision.yaml --source-dir /path/to/files"}),"\n",(0,r.jsx)(t.p,{children:"When validating the module against the Checkov security policy, by default you\nscan the module rather than the terraform plan. While the module scan does pick\nmany issues some validation errors will only appear during the plan stage. You\nshould consider using the '--use-terraform-plan' flag. Note, this requires\nyou have the appropriate cloud credentials configured within your terminal\nenvironment.\n$ tnctl verify revision revision.yaml --use-terraform-plan"}),"\n",(0,r.jsx)(t.p,{children:"To speed up multiple iterations of this command it's useful to use the --directory\nflag. This instructs the command to reuse the directory, rather then creating a\nan ephemeral one each time (and downloading, terraform provider, if --use-terraform-plan\nis enabled, and so forth). Note, the --directory flag will create files in the\ndirectory, so ensure there's no terraform files already there.\n$ tnctl verify revision revision.yaml --directory /path/to/directory"}),"\n",(0,r.jsx)(t.p,{children:"Once verification has completed, you can continue to assure the Revision by running\nit against terraform itself\n$ tnctl convert revision revision.yaml | terraform plan -out plan.out"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"tnctl verify revision [OPTIONS] FILE [flags]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"      --checkov-image string     The docker image of checkov to use when validating the security policy\n  -d, --directory string         Path to a directory to store temporary files\n  -h, --help                     help for revision\n  -s, --source-dir string        Path to a directory containing additional (or overrides) files i.e. Contexts, Policies, Plans etc\n      --terraform-image string   The docker image of terraform to use when generating a plan\n      --use-cluster              Indicates if we should retrieve configuration from the current kubeconfig (default true)\n      --use-terraform-plan       Indicates if we should use a terraform plan to verify the security policy\n"})}),"\n",(0,r.jsx)(t.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'      --config string   Path to the configuration file (default "HOME/.tnctl.yaml")\n      --verbose         Enable verbose logging\n'})}),"\n",(0,r.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"../tnctl_verify",children:"tnctl verify"}),"	 - Used to verify and validate resources"]}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return s}});var i=n(7294);let r={},o=i.createContext(r);function s(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);