"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([[1380],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(f,i(i({ref:r},p),{},{components:t})):n.createElement(f,i({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},148:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:4,sidebar_class_name:"green"},i="Cloud Resources",s={unversionedId:"admin/cloudresource",id:"admin/cloudresource",title:"Cloud Resources",description:"This feature is only available from >= v0.3.32 releases",source:"@site/docs/terranetes-controller/admin/cloudresource.md",sourceDirName:"admin",slug:"/admin/cloudresource",permalink:"/terranetes-controller/admin/cloudresource",draft:!1,editUrl:"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/admin/cloudresource.md",tags:[],version:"current",lastUpdatedBy:"Rohith Jayawardene",lastUpdatedAt:1696672868,formattedLastUpdatedAt:"Oct 7, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"Contexts",permalink:"/terranetes-controller/admin/contexts"},next:{title:"Observability",permalink:"/terranetes-controller/category/observability"}},l={},c=[{value:"What are Revisions?",id:"what-are-revisions",level:2},{value:"Revision specification?",id:"revision-specification",level:2},{value:"Plan",id:"plan",level:3},{value:"Inputs",id:"inputs",level:3},{value:"Configuration",id:"configuration",level:3},{value:"How to create Revisions?",id:"how-to-create-revisions",level:2},{value:"How to validate a Revision?",id:"how-to-validate-a-revision",level:2}],p={toc:c};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cloud-resources"},"Cloud Resources"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This feature is only available from >= v0.3.32 releases")),(0,a.kt)("p",null,"Terranetes supports two interfaces to provisioning cloud resources; ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configurations")," which are the legacy implementation and the ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources"),". While ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configurations")," provides a one-to-one mapping to the Terraform module, ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources")," takes a more managed approach. Rather the exposing the entirety of options to the consumer, ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"CloudResources")," pick and choose which attributes are exposed, thus reducing the heavy lifting by the users and well and ensuring options do not diverge from a known path."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note, while the user facing interface is the ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResource"),", a managed ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configuration")," is created by the controller as the implementation detail. You can think of ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources")," as a means of creating a managed ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configuration"),".")),(0,a.kt)("h2",{id:"what-are-revisions"},"What are Revisions?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions")," are the templates for ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources"),", each of these are versioned assets which has been curated and tested against, containing the defaults the organization requires and exposing only the functionality which is contextual. The basic gist is;"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions")," point to a terraform module."),(0,a.kt)("li",{parentName:"ul"},"They contain all the default options which the platform wants defaults to in the module."),(0,a.kt)("li",{parentName:"ul"},"They contain all the options which they want exposed to the consumer."),(0,a.kt)("li",{parentName:"ul"},"Versions can track the upstream terraform module, or move independently of it."),(0,a.kt)("li",{parentName:"ul"},"All ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources")," reference back to a ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")," in the cluster."),(0,a.kt)("li",{parentName:"ul"},"To upgrade a ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResource")," consumer update the ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")," it points to.")),(0,a.kt)("p",null,"The following depicts the relations between Plans (a collection of ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions"),"), ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources")," and the ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configuration")," it manages."),(0,a.kt)("img",{src:"/img/cloudresources.png"}),(0,a.kt)("h2",{id:"revision-specification"},"Revision specification?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions")," are made up for ",(0,a.kt)("strong",{parentName:"p"},"three")," sections"),(0,a.kt)("h3",{id:"plan"},"Plan"),(0,a.kt)("p",null,"Describes the metadata associated to the Revisions; the version, description, categories and so forth."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  ## Defines we are a member of a package\n  plan:\n    ## Is the name of the package we are a part of\n    name: fake\n    ## Is a collection of categories\n    categories: [mysql, aws, fake]\n    ## Is a description for what this plan provides\n    description: Provides a dummy terraform module for testing\n    ## Is the version of the package\n    revision: v0.0.3\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"name"),": is probably the most important field here, as all ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions")," are grouped by this field. ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revisions")," with the same ",(0,a.kt)("inlineCode",{parentName:"li"},"spec.plan.name")," are logically grouped into a ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/plans.terraform.appvia.io"},"Plan"),". Plans order these Revisions using semvar. So when a ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResource")," references a Plan ",(0,a.kt)("inlineCode",{parentName:"li"},"database"),", without specifying a version; it looks up the ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/plans.terraform.appvia.io"},"Plan")," and retrieves the latest version. If it specifies a version, it looks up the ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/plans.terraform.appvia.io"},"Plan")," and checks a ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")," of said version exists."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"categories"),": is a collection of tags associated to the revision, these are user facing and largely used for searching."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"description"),": provides a human readable description of the intended use for the ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"revision"),": is semvar version associated to this revision.")),(0,a.kt)("h3",{id:"inputs"},"Inputs"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/revisions.terraform.appvia.io#v1alpha1-.spec.configuration"},"Inputs")," are the options the platform team want to expose to the consumers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  ## Is a list of inputs the user is permitted to override\n  inputs:\n    - key: sentence\n      description: Is a sentence we want to print\n      required: true\n      default:\n        value: hello from second additional\n    - key: vpc_id\n      description: Hello\n    - key: list\n      description: A list of names\n      default:\n        values: [a, b, c]\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"key"),": (required) maps to the terraform variable within the module the ",(0,a.kt)("a",{parentName:"li",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")," is backing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"description"),": (required) provides a human readable description to the variable."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"required"),": (optional) indicates if the user MUST specify a value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"default.value"),": (optional) can be a string, number, list or map and is used as the default value for the variable.")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"The last section is provides a template to the ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configuration"),", determining the module source, default values, enabled features and so forth."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  configuration:\n    ## Using a public repository\n    module: https://github.com/appvia/terranetes-controller.git//test/e2e/assets/terraform/dummy?ref=master\n    ## Where to write any secrets\n    writeConnectionSecretToRef:\n      name: outputs\n")),(0,a.kt)("p",null,"Thus the managed ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/configurations.terraform.appvia.io"},"Configuration")," at the end is a combination of this section plus the optional inputs from above."),(0,a.kt)("h2",{id:"how-to-create-revisions"},"How to create Revisions?"),(0,a.kt)("p",null,"By hand of course, a ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/revisions.terraform.appvia.io"},"Revision")," is nothing more standard CRD; however using the ",(0,a.kt)("a",{parentName:"p",href:"../../cli/tnctl_create_revision/"},"tnctl create revision")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"tnctl create revision https://github.com/terraform-aws-modules/terraform-aws-rds?ref=v5.9.0\n")),(0,a.kt)("h2",{id:"how-to-validate-a-revision"},"How to validate a Revision?"),(0,a.kt)("p",null,"Part of the responsibility model of using ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/reference/cloudresources.terraform.appvia.io"},"CloudResources")," is passing a known and tested asset to the consumer. Terranetes tries to make this workflow simpler by using the ",(0,a.kt)("a",{parentName:"p",href:"/terranetes-controller/cli/tnctl_verify_revision"},"tnctl verify revision"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ tnctl verify revision revision.yaml\n? Input identifier is a mandatory input, what should it\'s value be? test\n\ud83d\udd30 Validating Revision Syntax\n   \u25ab\ufe0f The Revision CRD is syntactically correct with no errors found             \ud83d\udfe2\n\ud83d\udd30 Validating Revision Specification\n   \u25ab\ufe0f The Revision does not have any categories defined                          \ud83d\udfe0\n   \u25ab\ufe0f The Revision has a description defined                                     \ud83d\udfe2\n   \u25ab\ufe0f The Revision has the default description defined                           \ud83d\udfe0\n   \u25ab\ufe0f The Revision has a changelog defined                                       \ud83d\udfe2\n   \u25ab\ufe0f The Revision has the default changelog defined                             \ud83d\udfe0\n\ud83d\udd30 Validating Revision Inputs\n   \u25ab\ufe0f Checking input: backup_window                                              \ud83d\udfe2\n   \u25ab\ufe0f Checking input: allocated_storage                                          \ud83d\udfe2\n   \u25ab\ufe0f Checking input: identifier                                                 \ud83d\udfe2\n\ud83d\udd30 Retrieving Checkov Version\n   \u25ab\ufe0f Discovered Checkov version: "bridgecrew/checkov:2.3.291"                   \ud83d\udfe2\n\ud83d\udd30 Retrieving Terraform Version\n   \u25ab\ufe0f Discovered Terraform version: "hashicorp/terraform:1.5.6"                  \ud83d\udfe2\n\ud83d\udd30 Validating Module Policy permits Revision\n   \u25ab\ufe0f Found 1 module constraint policies                                         \ud83d\udfe2\n   \u25ab\ufe0f Revision is not permitted by any policy                                    \ud83d\udd34\n\ud83d\udd30 Validating Cloud Credentials Provider\n   \u25ab\ufe0f Checking if we providers associated with the revision                      \ud83d\udfe2\n   \u25ab\ufe0f Provider referenced exists in cluster                                      \ud83d\udfe2\n\ud83d\udd30 Validating of Context References\n   \u25ab\ufe0f Revision does not reference any values from context/s                      \ud83d\udfe2\n\ud83d\udd30 Validating against Checkov Security Policy\n   \u25ab\ufe0f Checkov is using the code, not the plan, consider --use-terraform-plan     \ud83d\udfe0\n   \u25ab\ufe0f Found 1 security policies to validate against                              \ud83d\udfe2\n   \u25ab\ufe0f Revision has passed 18 checks in policy: "checkov"                         \ud83d\udfe2\n   \u25ab\ufe0f Check ID against documentation: https://docs.bridgecrew.io/docs            \ud83d\udfe2\n   \u25ab\ufe0f Ensure that RDS instances have Multi-AZ enabled                            \ud83d\udd34\n      Check ID: CKV_AWS_157\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure that RDS instances have performance insights enabled                \ud83d\udd34\n      Check ID: CKV_AWS_353\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure that respective logs of Amazon Relational Database Service (Am      \ud83d\udd34\n      Check ID: CKV_AWS_129\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure that AWS database instances have deletion protection enabled        \ud83d\udd34\n      Check ID: CKV_AWS_293\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure that RDS instances has backup policy                                \ud83d\udd34\n      Check ID: CKV_AWS_133\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure that enhanced monitoring is enabled for Amazon RDS instances        \ud83d\udd34\n      Check ID: CKV_AWS_118\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Ensure CloudWatch log groups retains logs for at least 1 year              \ud83d\udd34\n      Check ID: CKV_AWS_338\n      Resource: module.main.module.db_instance.aws_cloudwatch_log_group.this\n   \u25ab\ufe0f Ensure RDS instance with copy tags to snapshots is enabled                 \ud83d\udd34\n      Check ID: CKV2_AWS_60\n      Resource: module.main.module.db_instance.aws_db_instance.this[0]\n   \u25ab\ufe0f Revision will fail on security policy: "checkov"                           \ud83d\udd34\n\n\ud83d\udfe2 Passed: 8, Warning: 4\n\ud83d\udd34 Failed: 10\n[Error]: revision failed verification checks\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The default validation checks the codebase but not the terraform plan. For a more complete validation we'd recommend passing read-only credentials and using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--use-terraform-plan")," flag, exporting the usual environment variable such as AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and so forth.")))}u.isMDXComponent=!0}}]);