"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["5064"],{4546:function(e,s,r){r.r(s),r.d(s,{metadata:()=>t,contentTitle:()=>p,default:()=>d,assets:()=>l,toc:()=>o,frontMatter:()=>i});var t=JSON.parse('{"id":"reference/policies.terraform.appvia.io","title":"policies.terraform.appvia.io","description":"Policy is the schema for provider definitions in terraform controller","source":"@site/docs/terranetes-controller/reference/policies.terraform.appvia.io.md","sourceDirName":"reference","slug":"/reference/policies.terraform.appvia.io","permalink":"/terranetes-controller/reference/policies.terraform.appvia.io","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/reference/policies.terraform.appvia.io.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161440000,"sidebarPosition":1,"frontMatter":{"title":"policies.terraform.appvia.io","linkTitle":"Policy","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"plans.terraform.appvia.io","permalink":"/terranetes-controller/reference/plans.terraform.appvia.io"},"next":{"title":"providers.terraform.appvia.io","permalink":"/terranetes-controller/reference/providers.terraform.appvia.io"}}'),c=r("5893"),a=r("65");let i={title:"policies.terraform.appvia.io",linkTitle:"Policy",sidebar_position:1},p="Policy",l={},o=[];function n(e){let s={a:"a",em:"em",h1:"h1",header:"header",...(0,a.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.header,{children:(0,c.jsx)(s.h1,{id:"policy",children:"Policy"})}),"\n",(0,c.jsx)("p",{class:"crd-description",children:"Policy is the schema for provider definitions in terraform controller"}),"\n",(0,c.jsxs)("dl",{class:"crd-meta",children:[(0,c.jsx)("dt",{class:"fullname",children:"Full name:"}),(0,c.jsx)("dd",{class:"fullname",children:"policies.terraform.appvia.io"}),(0,c.jsx)("dt",{class:"groupname",children:"Group:"}),(0,c.jsx)("dd",{class:"groupname",children:"terraform.appvia.io"}),(0,c.jsx)("dt",{class:"singularname",children:"Singular name:"}),(0,c.jsx)("dd",{class:"singularname",children:"policy"}),(0,c.jsx)("dt",{class:"pluralname",children:"Plural name:"}),(0,c.jsx)("dd",{class:"pluralname",children:"policies"}),(0,c.jsx)("dt",{class:"scope",children:"Scope:"}),(0,c.jsx)("dd",{class:"scope",children:"Cluster"}),(0,c.jsx)("dt",{class:"versions",children:"Versions:"}),(0,c.jsx)("dd",{class:"versions",children:(0,c.jsx)("a",{class:"version",href:"#v1alpha1",title:"Show schema for version v1alpha1",children:"v1alpha1"})})]}),"\n",(0,c.jsxs)("div",{class:"crd-schema-version",children:[(0,c.jsx)("h2",{id:"v1alpha1",children:"Version v1alpha1"}),(0,c.jsx)("h3",{id:"property-details-v1alpha1",children:"Properties"}),(0,c.jsxs)("div",{class:"property depth-0",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.apiVersion",children:".apiVersion"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsxs)("p",{children:["APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: ",(0,c.jsx)("a",{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",children:(0,c.jsx)(s.a,{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",children:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"})})]})})]})]}),(0,c.jsxs)("div",{class:"property depth-0",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.kind",children:".kind"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsxs)("p",{children:["Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: ",(0,c.jsx)("a",{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",children:(0,c.jsx)(s.a,{href:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",children:"https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"})})]})})]})]}),(0,c.jsxs)("div",{class:"property depth-0",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.metadata",children:".metadata"})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})})})]}),(0,c.jsxs)("div",{class:"property depth-0",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec",children:".spec"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"PolicySpec defines the desired state of a provider"})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints",children:".spec.constraints"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Constraints provides a series or constraints that must be enforced on the selectored terraform configurations."})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov",children:".spec.constraints.checkov"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Checkov provides the ability to enforce a set of security standards on all configurations. These can be configured to target specific resources based on namespace and resource labels"})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.checks",children:".spec.constraints.checkov.checks"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsxs)("p",{children:["Checks is a list of checks which should be applied against the configuration. Note, an empty list here implies checkov should run ALL checks. Please see ",(0,c.jsx)("a",{href:"https://www.checkov.io/5.Policy%20Index/terraform.html",children:(0,c.jsx)(s.a,{href:"https://www.checkov.io/5.Policy%20Index/terraform.html",children:"https://www.checkov.io/5.Policy%20Index/terraform.html"})})]})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.checks[*]",children:".spec.constraints.checkov.checks[*]"})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external",children:".spec.constraints.checkov.external"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"External is a collection of external checks which should be included in the scan. Each of the external sources and retrieved and sourced into /run/policy/NAME where they can be included as part of the scan"})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*]",children:".spec.constraints.checkov.external[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"ExternalCheck defines the definition for an external check - this comprises of the source and any optional secret"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*].name",children:".spec.constraints.checkov.external[*].name"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Name provides a arbitrary name to the checks - note, this name is used as the directory name when we source the code"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*].secretRef",children:".spec.constraints.checkov.external[*].secretRef"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"SecretRef is reference to secret which contains environment variables used by the source command to retrieve the code. This could be cloud credentials, ssh keys, git username and password etc"})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*].secretRef.name",children:".spec.constraints.checkov.external[*].secretRef.name"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"name is unique within a namespace to reference a secret resource."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*].secretRef.namespace",children:".spec.constraints.checkov.external[*].secretRef.namespace"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"namespace defines the space within which the secret name must be unique."})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.external[*].url",children:".spec.constraints.checkov.external[*].url"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsxs)("p",{children:["URL is the source external checks - this is usually a git repository. The notation for this is ",(0,c.jsx)("a",{href:"https://github.com/hashicorp/go-getter",children:(0,c.jsx)(s.a,{href:"https://github.com/hashicorp/go-getter",children:"https://github.com/hashicorp/go-getter"})})]})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector",children:".spec.constraints.checkov.selector"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Selector is the selector on the namespace or labels on the configuration. By leaving this fields empty you can implicitly selecting all configurations."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace",children:".spec.constraints.checkov.selector.namespace"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Namespace is used to filter a configuration based on the namespace labels of where it exists"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions",children:".spec.constraints.checkov.selector.namespace.matchExpressions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchExpressions is a list of label selector requirements. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions[*]",children:".spec.constraints.checkov.selector.namespace.matchExpressions[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions[*].key",children:".spec.constraints.checkov.selector.namespace.matchExpressions[*].key"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"key is the label key that the selector applies to."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions[*].operator",children:".spec.constraints.checkov.selector.namespace.matchExpressions[*].operator"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"operator represents a key\u2019s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions[*].values",children:".spec.constraints.checkov.selector.namespace.matchExpressions[*].values"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."})})]})]}),(0,c.jsxs)("div",{class:"property depth-8",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchExpressions[*].values[*]",children:[".spec.constraints.checkov.selector.namespace.matchExpressions[",(0,c.jsx)(s.em,{children:"].values["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.namespace.matchLabels",children:".spec.constraints.checkov.selector.namespace.matchLabels"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \u201Ckey\u201D, the operator is \u201CIn\u201D, and the values array contains only \u201Cvalue\u201D. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource",children:".spec.constraints.checkov.selector.resource"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Resource provides the ability to filter a configuration based on it\u2019s labels"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions",children:".spec.constraints.checkov.selector.resource.matchExpressions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchExpressions is a list of label selector requirements. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions[*]",children:".spec.constraints.checkov.selector.resource.matchExpressions[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions[*].key",children:".spec.constraints.checkov.selector.resource.matchExpressions[*].key"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"key is the label key that the selector applies to."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions[*].operator",children:".spec.constraints.checkov.selector.resource.matchExpressions[*].operator"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"operator represents a key\u2019s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions[*].values",children:".spec.constraints.checkov.selector.resource.matchExpressions[*].values"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."})})]})]}),(0,c.jsxs)("div",{class:"property depth-8",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchExpressions[*].values[*]",children:[".spec.constraints.checkov.selector.resource.matchExpressions[",(0,c.jsx)(s.em,{children:"].values["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.selector.resource.matchLabels",children:".spec.constraints.checkov.selector.resource.matchLabels"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \u201Ckey\u201D, the operator is \u201CIn\u201D, and the values array contains only \u201Cvalue\u201D. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.skipChecks",children:".spec.constraints.checkov.skipChecks"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"SkipChecks is a collection of checkov checks which you can defined as skipped. The security scan will ignore any failures on these checks."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.skipChecks[*]",children:".spec.constraints.checkov.skipChecks[*]"})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source",children:".spec.constraints.checkov.source"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Source indicates an external source for the checkov configurations"})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source.configuration",children:".spec.constraints.checkov.source.configuration"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Configuration is the configuration to use within the source directory"})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source.secretRef",children:".spec.constraints.checkov.source.secretRef"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"SecretRef is reference to secret which contains environment variables used by the source command to retrieve the code. This could be cloud credentials, ssh keys, git username and password etc"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source.secretRef.name",children:".spec.constraints.checkov.source.secretRef.name"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"name is unique within a namespace to reference a secret resource."})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source.secretRef.namespace",children:".spec.constraints.checkov.source.secretRef.namespace"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"namespace defines the space within which the secret name must be unique."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.checkov.source.url",children:".spec.constraints.checkov.source.url"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsxs)("p",{children:["URL is the source external checks - this is usually a git repository. The notation for this is ",(0,c.jsx)("a",{href:"https://github.com/hashicorp/go-getter",children:(0,c.jsx)(s.a,{href:"https://github.com/hashicorp/go-getter",children:"https://github.com/hashicorp/go-getter"})})]})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules",children:".spec.constraints.modules"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Modules provides the ability to control the source for all terraform modules. Allowing platform teams to control where the modules can be downloaded from."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.allowed",children:".spec.constraints.modules.allowed"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Allowed is a collection of regexes which are applied to the source of the terraform configuration. The configuration MUST match one or more of the regexes in order to be allowed to run."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.allowed[*]",children:".spec.constraints.modules.allowed[*]"})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector",children:".spec.constraints.modules.selector"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Selector is the selector on the namespace or labels on the configuration. By leaving this field empty you are implicitly selecting all configurations."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace",children:".spec.constraints.modules.selector.namespace"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Namespace is used to filter a configuration based on the namespace labels of where it exists"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions",children:".spec.constraints.modules.selector.namespace.matchExpressions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchExpressions is a list of label selector requirements. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions[*]",children:".spec.constraints.modules.selector.namespace.matchExpressions[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions[*].key",children:".spec.constraints.modules.selector.namespace.matchExpressions[*].key"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"key is the label key that the selector applies to."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions[*].operator",children:".spec.constraints.modules.selector.namespace.matchExpressions[*].operator"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"operator represents a key\u2019s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions[*].values",children:".spec.constraints.modules.selector.namespace.matchExpressions[*].values"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."})})]})]}),(0,c.jsxs)("div",{class:"property depth-8",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchExpressions[*].values[*]",children:[".spec.constraints.modules.selector.namespace.matchExpressions[",(0,c.jsx)(s.em,{children:"].values["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.namespace.matchLabels",children:".spec.constraints.modules.selector.namespace.matchLabels"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \u201Ckey\u201D, the operator is \u201CIn\u201D, and the values array contains only \u201Cvalue\u201D. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource",children:".spec.constraints.modules.selector.resource"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Resource provides the ability to filter a configuration based on it\u2019s labels"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions",children:".spec.constraints.modules.selector.resource.matchExpressions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchExpressions is a list of label selector requirements. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions[*]",children:".spec.constraints.modules.selector.resource.matchExpressions[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions[*].key",children:".spec.constraints.modules.selector.resource.matchExpressions[*].key"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"key is the label key that the selector applies to."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions[*].operator",children:".spec.constraints.modules.selector.resource.matchExpressions[*].operator"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"operator represents a key\u2019s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions[*].values",children:".spec.constraints.modules.selector.resource.matchExpressions[*].values"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."})})]})]}),(0,c.jsxs)("div",{class:"property depth-8",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchExpressions[*].values[*]",children:[".spec.constraints.modules.selector.resource.matchExpressions[",(0,c.jsx)(s.em,{children:"].values["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.constraints.modules.selector.resource.matchLabels",children:".spec.constraints.modules.selector.resource.matchLabels"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \u201Ckey\u201D, the operator is \u201CIn\u201D, and the values array contains only \u201Cvalue\u201D. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults",children:".spec.defaults"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Defaults provides the ability to target specific terraform module based on namespace or resource labels and automatically inject variables into the configurations."})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*]",children:".spec.defaults[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"DefaultVariables provides platform administrators the ability to inject default variables into a configuration"})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].secrets",children:".spec.defaults[*].secrets"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Secrets is a collection of secrets which are used to inject variables into the configuration"})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].secrets[*]",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].secrets["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector",children:".spec.defaults[*].selector"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"object"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Selector is used to determine which configurations the variables should be injected into"})})]})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.modules",children:".spec.defaults[*].selector.modules"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Modules provides a collection of regexes which are used to match against the configuration module"})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.modules[*]",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.modules["}),"]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-4",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace",children:".spec.defaults[*].selector.namespace"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Namespace selectors all configurations under one or more namespaces, determined by the labeling on the namespace."})})]})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions",children:".spec.defaults[*].selector.namespace.matchExpressions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchExpressions is a list of label selector requirements. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-6",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions[*]",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.namespace.matchExpressions["}),"]"]})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions[*].key",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.namespace.matchExpressions["}),"].key"]})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"key is the label key that the selector applies to."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions[*].operator",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.namespace.matchExpressions["}),"].operator"]})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"operator represents a key\u2019s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."})})]})]}),(0,c.jsxs)("div",{class:"property depth-7",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions[*].values",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.namespace.matchExpressions["}),"].values"]})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."})})]})]}),(0,c.jsxs)("div",{class:"property depth-8",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsxs)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchExpressions[*].values[*]",children:[".spec.defaults[",(0,c.jsx)(s.em,{children:"].selector.namespace.matchExpressions["}),"].values[*]"]})}),(0,c.jsx)("div",{class:"property-body",children:(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})})})]}),(0,c.jsxs)("div",{class:"property depth-5",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].selector.namespace.matchLabels",children:".spec.defaults[*].selector.namespace.matchLabels"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \u201Ckey\u201D, the operator is \u201CIn\u201D, and the values array contains only \u201Cvalue\u201D. The requirements are ANDed."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.defaults[*].variables",children:".spec.defaults[*].variables"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Variables is a collection of variables to inject into the configuration"})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.spec.summary",children:".spec.summary"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Summary is an optional field which can be used to define a summary of what the policy is configured to enforce."})})]})]}),(0,c.jsxs)("div",{class:"property depth-0",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status",children:".status"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"PolicyStatus defines the observed state of a provider"})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions",children:".status.conditions"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"array"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Conditions represents the observations of the resource\u2019s current state."})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*]",children:".status.conditions[*]"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Condition is the current observed condition of some aspect of a resource"})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].detail",children:".status.conditions[*].detail"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Detail is any additional human-readable detail to understand this condition, for example, the full underlying error which caused an issue"})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].lastTransitionTime",children:".status.conditions[*].lastTransitionTime"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"LastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].message",children:".status.conditions[*].message"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Message is a human readable message indicating details about the transition. This may be an empty string."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].name",children:".status.conditions[*].name"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Name is a human-readable name for this condition."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].observedGeneration",children:".status.conditions[*].observedGeneration"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"integer"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"ObservedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].reason",children:".status.conditions[*].reason"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Reason contains a programmatic identifier indicating the reason for the condition\u2019s last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].status",children:".status.conditions[*].status"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Status of the condition, one of True, False, Unknown."})})]})]}),(0,c.jsxs)("div",{class:"property depth-3",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.conditions[*].type",children:".status.conditions[*].type"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsxs)("div",{class:"property-meta",children:[(0,c.jsx)("span",{class:"property-type",children:"string"}),(0,c.jsx)("span",{class:"property-required",children:"Required"})]}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Type of condition in CamelCase or in foo.example.com/CamelCase. \u2014 Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastReconcile",children:".status.lastReconcile"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"LastReconcile describes the generation and time of the last reconciliation"})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastReconcile.generation",children:".status.lastReconcile.generation"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"integer"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Generation is the generation reconciled on the last reconciliation"})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastReconcile.time",children:".status.lastReconcile.time"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Time is the last time the resource was reconciled"})})]})]}),(0,c.jsxs)("div",{class:"property depth-1",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastSuccess",children:".status.lastSuccess"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"object"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"LastSuccess descibes the generation and time of the last reconciliation which resulted in a Success status"})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastSuccess.generation",children:".status.lastSuccess.generation"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"integer"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Generation is the generation reconciled on the last reconciliation"})})]})]}),(0,c.jsxs)("div",{class:"property depth-2",children:[(0,c.jsx)("div",{class:"property-header",children:(0,c.jsx)("h3",{class:"property-path",id:"v1alpha1-.status.lastSuccess.time",children:".status.lastSuccess.time"})}),(0,c.jsxs)("div",{class:"property-body",children:[(0,c.jsx)("div",{class:"property-meta",children:(0,c.jsx)("span",{class:"property-type",children:"string"})}),(0,c.jsx)("div",{class:"property-description",children:(0,c.jsx)("p",{children:"Time is the last time the resource was reconciled"})})]})]})]})]})}function d(e={}){let{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(n,{...e})}):n(e)}},65:function(e,s,r){r.d(s,{Z:function(){return p},a:function(){return i}});var t=r(7294);let c={},a=t.createContext(c);function i(e){let s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function p(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);