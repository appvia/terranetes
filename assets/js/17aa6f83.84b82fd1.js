"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["5903"],{1896:function(e,r,t){t.r(r),t.d(r,{metadata:()=>i,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>s});var i=JSON.parse('{"id":"admin/drift","title":"Drift Detection","description":"Drift detection is a feature that periodically executes a Terraform plan on a Configuration to ensure that the expected state, as defined by the Terraform state, aligns with the actual cloud resources. To utilize drift detection, Configurations must explicitly opt-in through their specification.","source":"@site/docs/terranetes-controller/admin/drift.md","sourceDirName":"admin","slug":"/admin/drift","permalink":"/terranetes-controller/admin/drift","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/admin/drift.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161752000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Injecting Defaults","permalink":"/terranetes-controller/admin/defaults"},"next":{"title":"Terraform State","permalink":"/terranetes-controller/admin/state"}}'),n=t("5893"),o=t("65");let s={sidebar_position:5},a="Drift Detection",c={},l=[{value:"Tuning Drift Detection",id:"tuning-drift-detection",level:2},{value:"Drift Intervals",id:"drift-intervals",level:3},{value:"Drift Threshold",id:"drift-threshold",level:3},{value:"Selection Process",id:"selection-process",level:3}];function d(e){let r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"drift-detection",children:"Drift Detection"})}),"\n",(0,n.jsxs)(r.p,{children:["Drift detection is a feature that periodically executes a Terraform plan on a ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," to ensure that the expected state, as defined by the Terraform state, aligns with the actual cloud resources. To utilize drift detection, ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configurations"})," must explicitly opt-in through their specification."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-yaml",children:"apiVersion: terraform.appvia.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: bucket\nspec:\n  module: https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v3.1.0\n  providerRef:\n    namespace: terraform-system\n    name: aws\n  # Enable drift detection\n  enableDriftDetection: true\n"})}),"\n",(0,n.jsx)(r.h2,{id:"tuning-drift-detection",children:"Tuning Drift Detection"}),"\n",(0,n.jsx)(r.p,{children:"Administrators have the ability to fine-tune drift detection through the controller, which offers two key configuration options:"}),"\n",(0,n.jsx)(r.h3,{id:"drift-intervals",children:"Drift Intervals"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"driftInterval"})," parameter specifies the duration that must elapse following the last Terraform plan execution (as recorded in the [Configuration](docs/terranetes-controller/reference/configurations.terraform.\nappvia.io.md) object's status) before a new drift detection check is initiated. The default value for this interval is ",(0,n.jsx)(r.code,{children:"3h"}),", indicating that a drift check will be performed every three hours from the last transition time for a given ",(0,n.jsx)(r.code,{children:"Configuration"})," object, provided it falls within the defined ",(0,n.jsx)(r.a,{href:"#drift-threshold",children:(0,n.jsx)(r.code,{children:"driftThreshold"})}),"."]}),"\n",(0,n.jsx)(r.admonition,{type:"important",children:(0,n.jsxs)(r.p,{children:["It is essential to note that the drift check is always measured from the last Terraform plan execution. If the ",(0,n.jsx)(r.code,{children:"Configuration"})," is modified within the specified interval, the timer resets, and the next drift check will occur three hours from the time of modification."]})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"driftInterval"})," can be customized through the Helm value ",(0,n.jsx)(r.code,{children:"controller.driftInterval"}),", with the format specified in minutes or hours, such as ",(0,n.jsx)(r.code,{children:"10m"})," or ",(0,n.jsx)(r.code,{children:"10h"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"drift-threshold",children:"Drift Threshold"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"driftThreshold"})," parameter is a configurable value that serves as a safeguard against overwhelming the cloud provider's API with drift detection checks. Since these checks involve executing a ",(0,n.jsx)(r.code,{children:"terraform plan"}),", they generate API requests to the cloud provider. Consequently, a large number of ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configurations"})," initiating drift checks simultaneously could lead to API timeouts and retries due to rate limiting."]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"driftThreshold"})," is expressed as a percentage, represented by a float value between 0 and 1. This percentage determines the maximum number of ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," resources that can concurrently execute a drift check."]}),"\n",(0,n.jsxs)(r.p,{children:["Notably, this threshold considers ",(0,n.jsxs)(r.strong,{children:["all ",(0,n.jsx)(r.code,{children:"Configuration"})," resources"]}),", including those without ",(0,n.jsx)(r.code,{children:"enableDriftDetection"}),", to ensure protection against Cloud API limits."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Scenario 1:"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Total ",(0,n.jsx)(r.code,{children:"Configuration"})," resources: 10"]}),"\n",(0,n.jsx)(r.li,{children:"Resources currently undergoing Terraform operations (plan or apply): 1"}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"driftThreshold: 0.2"})," (equivalent to 20% of total resources, allowing a maximum of 2 resources)"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Outcome:"})," A ",(0,n.jsx)(r.code,{children:"Configuration"})," with ",(0,n.jsx)(r.code,{children:"enableDriftCheck"})," set to true will initiate a drift detection check, as the current number of resources in progress does not exceed the defined threshold."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Scenario 2:"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Total ",(0,n.jsx)(r.code,{children:"Configuration"})," resources: 10"]}),"\n",(0,n.jsx)(r.li,{children:"Resources currently undergoing Terraform operations (plan or apply): 2"}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"driftThreshold: 0.2"})," (equivalent to 20% of total resources, allowing a maximum of 2 resources)"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Outcome:"})," A ",(0,n.jsx)(r.code,{children:"Configuration"})," with ",(0,n.jsx)(r.code,{children:"enableDriftCheck"})," set to true will not initiate a drift detection check at this time, as the current number of resources in progress has reached the defined threshold. The check will be re-evaluated after a fixed interval of 5 minutes."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Scenario 3:"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Total ",(0,n.jsx)(r.code,{children:"Configuration"})," resources: 10"]}),"\n",(0,n.jsx)(r.li,{children:"Resources currently undergoing Terraform operations (plan or apply): 0"}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"driftThreshold: 0.1"})," (equivalent to 1% of total resources, allowing a maximum of 1 resource)"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Outcome:"})," A ",(0,n.jsx)(r.code,{children:"Configuration"})," with ",(0,n.jsx)(r.code,{children:"enableDriftCheck"})," set to true will initiate a drift detection check, as no resources are currently in progress and the maximum number of resources that can be run simultaneously is rounded up to 1."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"selection-process",children:"Selection Process"}),"\n",(0,n.jsxs)(r.p,{children:["The controller selects a ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," for drift detection based on the following criteria:"]}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Drift detection is explicitly enabled within the configuration's specification, denoted by ",(0,n.jsx)(r.code,{children:"spec.enableDriftDetection: true"}),"."]}),"\n",(0,n.jsx)(r.li,{children:"The configuration has successfully completed a Terraform lifecycle, encompassing plan, approval, and apply phases."}),"\n",(0,n.jsx)(r.li,{children:"The elapsed time since the last successful Terraform plan execution exceeds the defined drift interval."}),"\n",(0,n.jsx)(r.li,{children:"The current number of concurrent Terraform plan or apply operations does not exceed the drift threshold, ensuring that the cloud provider's API rate limits are not breached."}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["The controller's selection process operates on a best-effort basis, without a predefined order. This approach ensures that all eligible ",(0,n.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," resources will be evaluated for drift detection over time."]})]})}function h(e={}){let{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65:function(e,r,t){t.d(r,{Z:function(){return a},a:function(){return s}});var i=t(7294);let n={},o=i.createContext(n);function s(e){let r=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);