"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["6380"],{7999:function(e,n,a){a.r(n),a.d(n,{metadata:()=>t,contentTitle:()=>o,default:()=>p,assets:()=>l,toc:()=>c,frontMatter:()=>i});var t=JSON.parse('{"id":"walkthroughs/database","title":"AWS Database Provisioning","description":"This guide provides a comprehensive walkthrough of the feature set, catering to both platform administrators and developers. It focuses on the self-service provisioning of a database resource in the cloud.","source":"@site/docs/terranetes-controller/walkthroughs/database.md","sourceDirName":"walkthroughs","slug":"/walkthroughs/database","permalink":"/terranetes-controller/walkthroughs/database","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/walkthroughs/database.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161440000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Walk Throughs","permalink":"/terranetes-controller/category/walk-throughs"},"next":{"title":"API Reference","permalink":"/terranetes-controller/category/api-reference"}}'),r=a("5893"),s=a("65");let i={sidebar_position:1},o="AWS Database Provisioning",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Platform Setup",id:"platform-setup",level:2},{value:"Provision a Provider",id:"provision-a-provider",level:3},{value:"Developer Consumption",id:"developer-consumption",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"aws-database-provisioning",children:"AWS Database Provisioning"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides a comprehensive walkthrough of the feature set, catering to both platform administrators and developers. It focuses on the self-service provisioning of a database resource in the cloud."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"This guide assumes the following prerequisites have been met:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The terranetes-controller has been successfully ",(0,r.jsx)(n.a,{href:"/terranetes-controller/quick_start",children:"installed"})," within a cluster."]}),"\n",(0,r.jsx)(n.li,{children:"The cluster name and its residing region are known."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/tools/#kubectl",children:"kubectl"})," is installed and available for use."]}),"\n",(0,r.jsx)(n.li,{children:"Appropriate cloud credentials are in place to facilitate the provisioning of an RDS instance within the account."}),"\n",(0,r.jsx)(n.li,{children:"Nodegroups are configured to utilize the EKS Cluster Security Group, without custom group configurations. Note that context data will still be accessible."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"This guide aims to comprehensively cover the steps required for both platform teams and developers to consume cloud resources."}),"\n",(0,r.jsx)(n.h2,{id:"platform-setup",children:"Platform Setup"}),"\n",(0,r.jsxs)(n.h3,{id:"provision-a-provider",children:["Provision a ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})]}),"\n",(0,r.jsxs)(n.p,{children:["To facilitate cloud communication, it is essential to establish credentials. For the purpose of this guide, we will utilize static credentials, specifically IAM access keys, although workload identity is also an option, as detailed in ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/providers",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"a) Create a Kubernetes secret containing the IAM credentials."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ kubectl -n terraform-system create secret generic aws \\\n  --from-literal=AWS_ACCESS_KEY_ID=<ID> \\\n  --from-literal=AWS_SECRET_ACCESS_KEY=<SECRET> \\\n  --from-literal=AWS_REGION=<REGION>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["b) Provision a ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," to utilize the credentials."]}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," will also preload any ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/contexts",children:"contextual data"})," for us."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Exporting the name of the cluster and the region it's running in\nexport CLUSTER_NAME=test\nexport CLUSTER_REGION=eu-west-2\n\ncat <<EOF | kubectl apply -f\n---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Provider\nmetadata:\n  name: aws\n  annotations:\n    terranetes.appvia.io/default-provider: \"true\"\nspec:\n  # Source and be 'secret' or 'injected'\n  source: secret\n  # Provider can be google, aws, azurerm, alicloud, azurestack, googleworkspace etc\n  provider: aws\n  # Preload Configuration\n  preload:\n    # Indicates if the preloading should be enabled\n    enabled: true\n    # Is the EKS cluster we use to pivot network and settings around\n    cluster: ${CLUSTER_NAME}\n    # Is the cloud region the cluster above resides\n    region: ${CLUSTER_REGION}\n    # Is the terranetes context resource we should provision\n    context: default\n  # Used when spec.source is secret.\n  secretRef:\n    namespace: terraform-system\n    name: aws\nEOF\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Upon successful deployment of the ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"}),", the ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/contexts",children:"contextual data"})," is loaded and made accessible through the ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," specified in ",(0,r.jsx)(n.code,{children:"spec.preload.context"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To view the data, execute the command ",(0,r.jsx)(n.code,{children:"kubectl get contexts.terraform.appvia.io default -o yaml"}),", which will display comprehensive information about the cluster, including networking and routing tables."]}),"\n",(0,r.jsx)(n.p,{children:"c) Establish a policy to restrict the provisioning of modules within the cluster"}),"\n",(0,r.jsxs)(n.p,{children:["For the purpose of this guide, we will limit the provisioning to a single Terraform module, specifically designed for database provisioning. It is possible to extend this limitation to include one or more modules or make it namespace-specific, as detailed in ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/policy/intro",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'cat <<EOF | kubectl apply -f -\napiVersion: terraform.appvia.io/v1alpha1\nkind: Policy\nmetadata:\n  name: permitted-modules\nspec:\n  constraints:\n    modules:\n      allowed:\n        - "https://github.com/terraform-aws-modules/terraform-aws-rds.*:v.*"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"developer-consumption",children:"Developer Consumption"}),"\n",(0,r.jsxs)(n.p,{children:["As a developer, I am responsible for an application that relies on a MySQL database. I understand that I will receive the database endpoint, username, and password via environment variables, which will be mounted from a ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/secret/#using-a-secret",children:"Kubernetes secret"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"a) Let's create a namespace for our application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl create namespace apps\n"})}),"\n",(0,r.jsx)(n.p,{children:"b) As the Platform Team, let's provision a revision"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"\ncat <<EOF | kubectl\n---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Revision\nmetadata:\n  name: database\n  namespace: apps\nspec:\n  plan:\n    name: database-mysql\n    categories: [mysql, database, aws]\n    description: Provides a MySQL database\n    revision: v0.0.1\n\n  inputs:\n    - key: identifier\n      description: Is the cloud resource name for the database instance\n      required: true\n    - key: db_name\n      description: Is the name of the database we should create in the instances\n      required: true\n      default:\n        value: demo\n    - key: backup_retention_period\n      description: The days to retain backups for\n      type: number\n      default:\n        value: 7\n    - key: allocated_storage\n      description: The database size in GB as a integer\n      default:\n        value: 5\n\n  configuration:\n    module: https://github.com/terraform-aws-modules/terraform-aws-rds.git?ref=v5.9.0\n\n    # We are going to consume the contextual data from the context\n    valueFrom:\n      - context: default\n        # We will place the database on the private subnets\n        key: private_subnet_ids\n        # We will map to this the following in the module\n        name: subnet_ids\n\n      - context: default\n        # Nodegroups in our infra are using the cluster security\n        # group\n        key: eks_cluster_security_group_ids\n        # We map this to the following in the module\n        name: vpc_security_group_ids\n\n      writeConnectionSecretToRef:\n        name: database\n        keys:\n          - db_instance_address:database_hostname\n          - db_instance_username:database_username\n          - db_instance_password:database_password\n          - db_instance_port:database_port\n\n      variables:\n        allocated_storage: 5\n        create_db_subnet_group: true\n        engine: mysql\n        engine_version: '5.7'\n        family: mysql5.7\n        instance_class: db.t2.large\n        major_engine_version: '5.7'\n        port: 3306\n        skip_final_snapshot: true\n        username: root\n\n    parameters:\n      - name: character_set_client\n        value: utf8mb4\n      - name: character_set_server\n        value: utf8mb4\n"})}),"\n",(0,r.jsx)(n.p,{children:"c) The application initiates a request for a CloudResource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cat <<EOF | kubectl apply -n apps -f -\napiVersion: terraform.appvia.io/v1alpha1\nkind: CloudResource\nmetadata:\n  name: database\n  labels:\n    app: database\nspec:\n  plan:\n    name: database-mysql\n    revision: v0.0.1\n  variables:\n    allocated_storage: 10\n    identifier: demo\n  writeConnectionSecretToRef:\n    name: database\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to validate the accessibility of the cloud resource database, a sample application deployment has been provided below. This deployment is designed to securely mount the database access credentials from a secret, which is dynamically generated by the CloudResource resource mentioned above. The application itself is represented by a ",(0,r.jsx)(n.code,{children:"mariadb"})," container, which serves as the primary interface for interacting with the database."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cat <<EOF | kubectl apply -n apps -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: application\n        image: mariadb\n        stdin: true\n        tty: true\n        command: [sh]\n        envFrom:\n          - secretRef:\n              name: database\n"})}),"\n",(0,r.jsx)(n.p,{children:"To validate the accessibility of the cloud resource database, execute the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl -n apps exec -ti $(kubectl -n apps get pod --label app=frontend) sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To access the database, execute the following command using the ",(0,r.jsx)(n.code,{children:"mysql"})," CLI, and enter the password for the database user when prompted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mysql -h ${DATABASE_HOSTNAME} -P ${DATABASE_PORT} -u ${DATABASE_USERNAME} -p\nEnter password:\n"})})]})}function p(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65:function(e,n,a){a.d(n,{Z:function(){return o},a:function(){return i}});var t=a(7294);let r={},s=t.createContext(r);function i(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);