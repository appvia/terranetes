"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["7102"],{517:function(e,t,n){n.r(t),n.d(t,{metadata:()=>r,contentTitle:()=>i,default:()=>d,assets:()=>s,toc:()=>u,frontMatter:()=>l});var r=JSON.parse('{"id":"cli/tnctl_convert_cloudresource","title":"tnctl convert cloudresource","description":"tnctl convert cloudresource","source":"@site/docs/terranetes-controller/cli/tnctl_convert_cloudresource.md","sourceDirName":"cli","slug":"/cli/tnctl_convert_cloudresource","permalink":"/terranetes-controller/cli/tnctl_convert_cloudresource","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/cli/tnctl_convert_cloudresource.md","tags":[],"version":"current","lastUpdatedBy":"Kashif Saadat","lastUpdatedAt":1732124170000,"frontMatter":{"title":"tnctl convert cloudresource"},"sidebar":"tutorialSidebar","previous":{"title":"tnctl convert","permalink":"/terranetes-controller/cli/tnctl_convert"},"next":{"title":"tnctl convert configuration","permalink":"/terranetes-controller/cli/tnctl_convert_configuration"}}'),o=n("5893"),c=n("65");let l={title:"tnctl convert cloudresource"},i=void 0,s={},u=[{value:"tnctl convert cloudresource",id:"tnctl-convert-cloudresource",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function a(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"tnctl-convert-cloudresource",children:"tnctl convert cloudresource"}),"\n",(0,o.jsx)(t.p,{children:"Used to convert cloudresource back to terraform"}),"\n",(0,o.jsx)(t.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(t.p,{children:"Provides the ability to convert configurations and cloudresources back\ninto terraform modules."}),"\n",(0,o.jsx)(t.p,{children:"Note, if you include --include-provider or --include-checkov, this\ncommand will use the current kubeconfig context to retrieve the provider\nand checkov policy from the cluster."}),"\n",(0,o.jsx)(t.p,{children:"Convert a configuration in the cluster into a terraform module:\n$ tnctl convert configuration -n my-namespace my-configuration"}),"\n",(0,o.jsx)(t.p,{children:"Convert a configuration file into a terraform module:\n$ tnctl convert configuration -f my-configuration.yaml"}),"\n",(0,o.jsx)(t.p,{children:"Convert a cloudresource in the cluster into a terraform module:\n$ tnctl convert cloudresource -n my-namespace my-cloudresource"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"tnctl convert cloudresource [OPTIONS] NAME [flags]\n"})}),"\n",(0,o.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'  -h, --help               help for cloudresource\n      --include-checkov    Include checkov in the output (default true)\n      --include-provider   Include provider in the output (default true)\n  -n, --namespace string   Namespace of the resource (default "default")\n  -p, --path string        The path to write the files to (default ".")\n'})}),"\n",(0,o.jsx)(t.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'      --config string   Path to the configuration file (default "HOME/.tnctl.yaml")\n      --verbose         Enable verbose logging\n'})}),"\n",(0,o.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"../tnctl_convert",children:"tnctl convert"}),"	 - Used to convert between different formats"]}),"\n"]})]})}function d(e={}){let{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},65:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return l}});var r=n(7294);let o={},c=r.createContext(o);function l(e){let t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);