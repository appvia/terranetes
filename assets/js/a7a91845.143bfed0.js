"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([[5839],{9815:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=a(4848),t=a(8453);const s={sidebar_position:1},o="Provisioning an Database in AWS",i={id:"walkthroughs/database",title:"Provisioning an Database in AWS",description:"The following tries to encompass a walk-through of the feature set, from a platform admin and developer consumption for self-serving a database resource in the cloud.",source:"@site/docs/terranetes-controller/walkthroughs/database.md",sourceDirName:"walkthroughs",slug:"/walkthroughs/database",permalink:"/terranetes-controller/walkthroughs/database",draft:!1,unlisted:!1,editUrl:"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/walkthroughs/database.md",tags:[],version:"current",lastUpdatedBy:"Kashif Saadat",lastUpdatedAt:1724862234e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Walk Throughs",permalink:"/terranetes-controller/category/walk-throughs"},next:{title:"API Reference",permalink:"/terranetes-controller/category/api-reference"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Platform Setup",id:"platform-setup",level:2},{value:"Provision a Provider",id:"provision-a-provider",level:3},{value:"Developer Consumption",id:"developer-consumption",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"provisioning-an-database-in-aws",children:"Provisioning an Database in AWS"}),"\n",(0,r.jsx)(n.p,{children:"The following tries to encompass a walk-through of the feature set, from a platform admin and developer consumption for self-serving a database resource in the cloud."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"This guide is assuming the following"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You have ",(0,r.jsx)(n.a,{href:"/terranetes-controller/quick_start",children:"installed"})," the terranetes-controller in a cluster."]}),"\n",(0,r.jsx)(n.li,{children:"You have the cluster name and region is resides in"}),"\n",(0,r.jsxs)(n.li,{children:["You have ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/tools/#kubectl",children:"kubectl"})," installed."]}),"\n",(0,r.jsx)(n.li,{children:"You have appropriate cloud credentials to provision an RDS in the account."}),"\n",(0,r.jsxs)(n.li,{children:["The nodegroups are using the EKS Cluster Security Group and not configured with custom groups ",(0,r.jsx)(n.em,{children:"(though the data will be available in the context)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"The guide tries to cover the step required from both a platform team perspective and developer consumption the cloud resource."}),"\n",(0,r.jsx)(n.h2,{id:"platform-setup",children:"Platform Setup"}),"\n",(0,r.jsxs)(n.h3,{id:"provision-a-provider",children:["Provision a ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})]}),"\n",(0,r.jsxs)(n.p,{children:["First we need to setup credentials to speak cloud. For the purposes of the guide we will assume the controller is using static credentials (i.e IAM access keys), though see ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/providers",children:"here"})," for workload identity."]}),"\n",(0,r.jsx)(n.p,{children:"a) Lets start by create a kubernetes secret contains the IAM credentials"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"$ kubectl -n terraform-system create secret generic aws \\\n  --from-literal=AWS_ACCESS_KEY_ID=<ID> \\\n  --from-literal=AWS_SECRET_ACCESS_KEY=<SECRET> \\\n  --from-literal=AWS_REGION=<REGION>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["b) Provision a ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," to use the credentials"]}),"\n",(0,r.jsxs)(n.p,{children:["We will also use this ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," to preload any ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/contexts",children:"contextual data"})," for us."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Lets export the name of the cluster and the region it's running\nexport CLUSTER_NAME=test\nexport CLUSTER_REGION=eu-west-2\n\ncat <<EOF | kubectl apply -f\n---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Provider\nmetadata:\n  name: aws\n  annotations:\n    terranetes.appvia.io/default-provider: \"true\"\nspec:\n  # Source and be 'secret' or 'injected'\n  source: secret\n  # Provider can be google, aws, azurerm, alicloud, azurestack, googleworkspace etc\n  provider: aws\n  # Preload Configuration\n  preload:\n    # Indicates if the preloading should be enabled\n    enabled: true\n    # Is the EKS cluster we use to pivot network and settings around\n    cluster: ${CLUSTER_NAME}\n    # Is the cloud region the cluster above resides\n    region: ${CLUSTER_REGION}\n    # Is the terranetes context resource we should provision\n    context: default\n  # Used when spec.source is secret.\n  secretRef:\n    namespace: terraform-system\n    name: aws\nEOF\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note, once the ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," has gone healthy, the ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/contexts",children:"contextual data"})," will be loaded make available via ",(0,r.jsx)(n.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," specified above ",(0,r.jsx)(n.code,{children:"spec.preload.context"})]}),"\n",(0,r.jsxs)(n.p,{children:["You can see the data via ",(0,r.jsx)(n.code,{children:"kubectl get contexts.terraform.appvia.io default -o yaml"}),". Which will have loads, details on the cluster, networking, routing tables and so forth."]}),"\n",(0,r.jsx)(n.p,{children:"c) Setup a policy to limit which modules can be provisioned within the cluster"}),"\n",(0,r.jsxs)(n.p,{children:["For the purposes of the guide I want to limit to a single terraform module, used to provision database. I can of course scope this to one or more modules or make it namespace specific; see ",(0,r.jsx)(n.a,{href:"/terranetes-controller/admin/policy/intro",children:"here"})," for details."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'cat <<EOF | kubectl apply -f -\napiVersion: terraform.appvia.io/v1alpha1\nkind: Policy\nmetadata:\n  name: permitted-modules\nspec:\n  constraints:\n    modules:\n      allowed:\n        - "https://github.com/terraform-aws-modules/terraform-aws-rds.*:v.*"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"developer-consumption",children:"Developer Consumption"}),"\n",(0,r.jsxs)(n.p,{children:["From the developer perspective, I have an application which has a dependency on a MySQL database, and understand i'll be passed database the endpoint, username and password via environments variables, in this case mounted from a ",(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/secret/#using-a-secret",children:"Kubernetes secret"})]}),"\n",(0,r.jsx)(n.p,{children:"a) Lets create a namespace for our application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl create namespace apps\n"})}),"\n",(0,r.jsx)(n.p,{children:"b) As the Platform Team lets provision a revision"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"\ncat <<EOF | kubectl\n---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Revision\nmetadata:\n  name: database\n  namespace: apps\nspec:\n  plan:\n    name: database-mysql\n    categories: [mysql, database, aws]\n    description: Provides a MySQL database\n    revision: v0.0.1\n\n  inputs:\n    - key: identifier\n      description: Is the cloud resource name for the database instance\n      required: true\n    - key: db_name\n      description: Is the name of the database we should create in the instances\n      required: true\n      default:\n        value: demo\n    - key: backup_retention_period\n      description: The days to retain backups for\n      type: number\n      default:\n        value: 7\n    - key: allocated_storage\n      description: The database size in GB as a integer\n      default:\n        value: 5\n\n  configuration:\n    module: https://github.com/terraform-aws-modules/terraform-aws-rds.git?ref=v5.9.0\n\n    # We are going to consume the contextual data from the context\n    valueFrom:\n      - context: default\n        # We will place the database on the private subnets\n        key: private_subnet_ids\n        # We will map to this the following in the module\n        name: subnet_ids\n\n      - context: default\n        # Nodegroups in our infra are using the cluster security\n        # group\n        key: eks_cluster_security_group_ids\n        # We map this to the following in the module\n        name: vpc_security_group_ids\n\n      writeConnectionSecretToRef:\n        name: database\n        keys:\n          - db_instance_address:database_hostname\n          - db_instance_username:database_username\n          - db_instance_password:database_password\n          - db_instance_port:database_port\n\n      variables:\n        allocated_storage: 5\n        create_db_subnet_group: true\n        engine: mysql\n        engine_version: '5.7'\n        family: mysql5.7\n        instance_class: db.t2.large\n        major_engine_version: '5.7'\n        port: 3306\n        skip_final_snapshot: true\n        username: root\n\n    parameters:\n      - name: character_set_client\n        value: utf8mb4\n      - name: character_set_server\n        value: utf8mb4\n"})}),"\n",(0,r.jsx)(n.p,{children:"c) Our application requests a CloudResource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cat <<EOF | kubectl apply -n apps -f -\napiVersion: terraform.appvia.io/v1alpha1\nkind: CloudResource\nmetadata:\n  name: database\n  labels:\n    app: database\nspec:\n  plan:\n    name: database-mysql\n    revision: v0.0.1\n  variables:\n    allocated_storage: 10\n    identifier: demo\n  writeConnectionSecretToRef:\n    name: database\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note we are just using a ",(0,r.jsx)(n.code,{children:"mariadb"})," container here to verify access, as a replacement for application."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cat <<EOF | kubectl apply -n apps -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: application\n        image: mariadb\n        stdin: true\n        tty: true\n        command: [sh]\n        envFrom:\n          - secretRef:\n              name: database\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can verify access via"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl -n apps exec -ti $(kubectl -n apps get pod --label app=frontend) sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And access the cluster via ",(0,r.jsx)(n.code,{children:"mysql"})," cli by running the below command and entering the database user password when prompted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mysql -h ${DATABASE_HOSTNAME} -P ${DATABASE_PORT} -u ${DATABASE_USERNAME} -p\nEnter password:\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var r=a(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);