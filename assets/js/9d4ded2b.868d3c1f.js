"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["650"],{4658:function(e,t,r){r.r(t),r.d(t,{metadata:()=>n,contentTitle:()=>s,default:()=>u,assets:()=>i,toc:()=>a,frontMatter:()=>l});var n=JSON.parse('{"id":"cli/tnctl_retry_cloudresource","title":"tnctl retry cloudresource","description":"tnctl retry cloudresource","source":"@site/docs/terranetes-controller/cli/tnctl_retry_cloudresource.md","sourceDirName":"cli","slug":"/cli/tnctl_retry_cloudresource","permalink":"/terranetes-controller/cli/tnctl_retry_cloudresource","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/cli/tnctl_retry_cloudresource.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161829000,"frontMatter":{"title":"tnctl retry cloudresource"},"sidebar":"tutorialSidebar","previous":{"title":"tnctl retry","permalink":"/terranetes-controller/cli/tnctl_retry"},"next":{"title":"tnctl retry configuration","permalink":"/terranetes-controller/cli/tnctl_retry_configuration"}}'),o=r("5893"),c=r("65");let l={title:"tnctl retry cloudresource"},s=void 0,i={},a=[{value:"tnctl retry cloudresource",id:"tnctl-retry-cloudresource",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function d(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"tnctl-retry-cloudresource",children:"tnctl retry cloudresource"}),"\n",(0,o.jsx)(t.p,{children:"Attempts to restart a cloud resource"}),"\n",(0,o.jsx)(t.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(t.p,{children:"By default a Configuration is only run on a change to the specification. Its\nuseful however to be able to restart the process without changing the\nspec - i.e. the credentials were incorrect and out-of-band error occurred or\nso forth."}),"\n",(0,o.jsx)(t.p,{children:"This command will restart the process by tagging the configuration with a\nannotation. By default the restarted process will be watched for logs."}),"\n",(0,o.jsx)(t.p,{children:"Restart the Configuration:\n$ tnctl retry NAME"}),"\n",(0,o.jsx)(t.p,{children:"Restart the Configuration but do not watch the logs:\n$ tnctl retry NAME --watch=false"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"tnctl retry cloudresource [OPTIONS] NAME [flags]\n"})}),"\n",(0,o.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'  -h, --help               help for cloudresource\n  -n, --namespace string   The namespace the resource resides (default "default")\n  -w, --watch              Watch the logs after restarting the resource (default true)\n'})}),"\n",(0,o.jsx)(t.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'      --config string   Path to the configuration file (default "HOME/.tnctl.yaml")\n      --verbose         Enable verbose logging\n'})}),"\n",(0,o.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"../tnctl_retry",children:"tnctl retry"}),"	 - Attempts to trigger the resource to retry"]}),"\n"]})]})}function u(e={}){let{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65:function(e,t,r){r.d(t,{Z:function(){return s},a:function(){return l}});var n=r(7294);let o={},c=n.createContext(o);function l(e){let t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);