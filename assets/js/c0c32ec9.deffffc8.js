"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["8606"],{7296:function(t,e,n){n.r(e),n.d(e,{metadata:()=>r,contentTitle:()=>l,default:()=>u,assets:()=>s,toc:()=>a,frontMatter:()=>c});var r=JSON.parse('{"id":"cli/tnctl_retry_configuration","title":"tnctl retry configuration","description":"tnctl retry configuration","source":"@site/docs/terranetes-controller/cli/tnctl_retry_configuration.md","sourceDirName":"cli","slug":"/cli/tnctl_retry_configuration","permalink":"/terranetes-controller/cli/tnctl_retry_configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/cli/tnctl_retry_configuration.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161655000,"frontMatter":{"title":"tnctl retry configuration"},"sidebar":"tutorialSidebar","previous":{"title":"tnctl retry cloudresource","permalink":"/terranetes-controller/cli/tnctl_retry_cloudresource"},"next":{"title":"tnctl search","permalink":"/terranetes-controller/cli/tnctl_search"}}'),o=n("5893"),i=n("65");let c={title:"tnctl retry configuration"},l=void 0,s={},a=[{value:"tnctl retry configuration",id:"tnctl-retry-configuration",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function d(t){let e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"tnctl-retry-configuration",children:"tnctl retry configuration"}),"\n",(0,o.jsx)(e.p,{children:"Attempts to restart a configuration"}),"\n",(0,o.jsx)(e.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(e.p,{children:"By default a Configuration is only run on a change to the specification. Its\nuseful however to be able to restart the process without changing the\nspec - i.e. the credentials were incorrect and out-of-band error occurred or\nso forth."}),"\n",(0,o.jsx)(e.p,{children:"This command will restart the process by tagging the configuration with a\nannotation. By default the restarted process will be watched for logs."}),"\n",(0,o.jsx)(e.p,{children:"Restart the Configuration:\n$ tnctl retry NAME"}),"\n",(0,o.jsx)(e.p,{children:"Restart the Configuration but do not watch the logs:\n$ tnctl retry NAME --watch=false"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"tnctl retry configuration [OPTIONS] NAME [flags]\n"})}),"\n",(0,o.jsx)(e.h3,{id:"options",children:"Options"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'  -h, --help               help for configuration\n  -n, --namespace string   The namespace the resource resides (default "default")\n  -w, --watch              Watch the logs after restarting the resource (default true)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'      --config string   Path to the configuration file (default "HOME/.tnctl.yaml")\n      --verbose         Enable verbose logging\n'})}),"\n",(0,o.jsx)(e.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"../tnctl_retry",children:"tnctl retry"}),"	 - Attempts to trigger the resource to retry"]}),"\n"]})]})}function u(t={}){let{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},65:function(t,e,n){n.d(e,{Z:function(){return l},a:function(){return c}});var r=n(7294);let o={},i=r.createContext(o);function c(t){let e=r.useContext(i);return r.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:c(t.components),r.createElement(i.Provider,{value:e},t.children)}}}]);