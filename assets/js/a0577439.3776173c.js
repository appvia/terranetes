"use strict";(self.webpackChunkterranetes=self.webpackChunkterranetes||[]).push([["42"],{9566:function(e,r,n){n.r(r),n.d(r,{metadata:()=>t,contentTitle:()=>s,default:()=>h,assets:()=>l,toc:()=>c,frontMatter:()=>a});var t=JSON.parse('{"id":"admin/contexts","title":"Contexts","description":"Contexts serve as a mechanism for sharing common configuration elements across Configurations. This resource type is scoped at the cluster level, allowing any Configuration within the cluster to utilize it.","source":"@site/docs/terranetes-controller/admin/contexts.md","sourceDirName":"admin","slug":"/admin/contexts","permalink":"/terranetes-controller/admin/contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/appvia/terranetes/tree/master/docs/terranetes-controller/admin/contexts.md","tags":[],"version":"current","lastUpdatedBy":"dependabot[bot]","lastUpdatedAt":1745161406000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_class_name":"green"},"sidebar":"tutorialSidebar","previous":{"title":"Checkov Policy","permalink":"/terranetes-controller/admin/policy/checkov"},"next":{"title":"Cloud Resources","permalink":"/terranetes-controller/admin/cloudresource"}}'),o=n("5893"),i=n("65");let a={sidebar_position:3,sidebar_class_name:"green"},s="Contexts",l={},c=[{value:"Create a Context",id:"create-a-context",level:2},{value:"Configure Preloading",id:"configure-preloading",level:2},{value:"How to reference a Context",id:"how-to-reference-a-context",level:2},{value:"Utilizing a Custom Preload",id:"utilizing-a-custom-preload",level:2}];function d(e){let r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"contexts",children:"Contexts"})}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Contexts"})," serve as a mechanism for sharing common configuration elements across ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configurations"}),". This resource type is scoped at the cluster level, allowing any Configuration within the cluster to utilize it."]}),"\n",(0,o.jsx)(r.admonition,{type:"tip",children:(0,o.jsx)(r.p,{children:"Please note that this feature is only accessible starting from version 0.3.25 and onwards."})}),"\n",(0,o.jsx)(r.h2,{id:"create-a-context",children:"Create a Context"}),"\n",(0,o.jsxs)(r.p,{children:["To create a ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"}),", follow the example below."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Context\nmetadata:\n  name: default\nspec:\n  #\n  ## All variables MUST follow the pattern of 'description' and 'value'. The\n  ## value can be any complex or simple type (boolean, int, map, object etc)\n  #\n  variables:\n    # The name of the variable\n    vpc_id:\n      # A description for the consumer of the input\n      description: The network identifier we are residing in\n      # The value of the variable\n      value: vpc-1223133113\n    public_subnets_ids:\n      # A description for the consumer of the input\n      description: |\n        A collection of subnet id's which are publicly available, i.e.\n        they are attached to an internet gateway\n      # The value of the variable\n      value:\n        - subnet-12312312312\n        - subnet-32332321312\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The resource contains a map of variables; each variable MUST have a ",(0,o.jsx)(r.code,{children:"description"})," and ",(0,o.jsx)(r.code,{children:"value"}),", with the value being any simple (integer, boolean, string) or complex type (maps, list, maps of maps and so forth)."]}),"\n",(0,o.jsx)(r.h2,{id:"configure-preloading",children:"Configure Preloading"}),"\n",(0,o.jsx)(r.admonition,{type:"warning",children:(0,o.jsxs)(r.p,{children:["At present, only the ",(0,o.jsx)(r.strong,{children:"AWS"})," cloud provider supports automatic preloading. While other providers are in the pipeline, they have not yet been implemented."]})}),"\n",(0,o.jsxs)(r.p,{children:["Terranetes is equipped with the capability to automatically populate a ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," by retrieving details about the cluster where the controller is located and populating them into the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"}),". This feature is currently limited to AWS."]}),"\n",(0,o.jsxs)(r.p,{children:["To leverage the preloading feature, it is necessary to modify the configuration of a ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," by incorporating a ",(0,o.jsx)(r.code,{children:"spec.preload"})," section. This section enables the preloading process to utilize the Provider's credentials for the purpose of retrieving information directly from the cloud vendor."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"---\napiVersion: terraform.appvia.io/v1alpha1\nkind: Provider\nmetadata:\n  name: aws\nspec:\n  # The source can be 'secret' or 'injected'. When using 'secret', you\n  # must specify the spec.secretRef which defines the name of the\n  # secret in the controller namespace containing the credentials.\n  source: secret\n  # The provider can be google, aws, azurerm, alicloud, azurestack, googleworkspace etc\n  provider: aws\n  # Provides configuration for the contextual data preloader (currently only\n  # available for aws)\n  preload:\n    # Indicates if the preloading should be enabled\n    enabled: true\n    # Is the EKS cluster we use to pivot network and settings around\n    cluster: eks\n    # Is the cloud region the cluster above resides\n    region: eu-west-2\n    # Is the terranetes context resource we should provision\n    context: default\n  # Used when spec.source is secret.\n  secretRef:\n    namespace: terraform-system\n    name: aws\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"spec.preload"})," in the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," requires the following information."]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"enabled"})," Indicates if we should preload any data into a ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"cluster"})," Is the cloud name of the cluster we reside in, i.e. the EKS cluster name."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"region"})," Is the cloud region the cluster (",(0,o.jsx)(r.code,{children:"spec.preload.cluster"}),") resides in."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"context"})," Is the name of the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," you wish to populate the values into."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["Once this information has been defined, a ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," resource will be automatically provisioned and preloaded with details, as shown below;"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"$ k get contexts.terraform.appvia.io default  -o yaml\napiVersion: terraform.appvia.io/v1alpha1\nkind: Context\nmetadata:\n  generation: 1\n  labels:\n    terranetes.appvia.io/preload-provider-name: aws\n  name: default\nspec:\n  variables:\n    eks:\n      description: AWS ARN for the Kubernetes cluster\n      value: arn:aws:eks:eu-west-2:XXXXXXXXX:cluster/eks-test\n    eks_cluster_security_group_id:\n      description: The security group ID attached to the EKS cluster\n      value: sg-XXXXXXXXX\n    eks_endpoint:\n      description: The endpoint for the EKS cluster\n      value: https://XXXXXXXXXXXXXXXX.sk1.eu-west-2.eks.amazonaws.com\n    eks_name:\n      description: The name of the EKS cluster\n      value: eks\n    eks_platform_version:\n      description: The platform version of the EKS cluster\n      value: eks.6\n    eks_private_access:\n      description: Indicates whether or not the EKS cluster has private access enabled\n      value: true\n    eks_public_access:\n      description: Indicates whether or not the EKS cluster has public access enabled\n      value: false\n    eks_public_access_cidrs:\n      description: The CIDR blocks that are allowed access to the EKS cluster\n      value:\n      - 0.0.0.0/0\n    eks_role_arn:\n      description: The ARN of the IAM role that provides permissions for the EKS cluster\n      value: arn:aws:iam::XXXXXXXXXX:role/eks-test-role\n    eks_route_tables_ids:\n      description: A list of all route tables id associate to the subnets which are\n        part of the EKS cluster\n      value:\n      - rtb-04dbff51b83821XXX\n     ....MORE VARIABLES\n    vpc_id:\n      description: The ID of the VPC used by the EKS cluster\n      value: vpc-0a6f4fbb4bXXXXXXX\n"})}),"\n",(0,o.jsx)(r.h2,{id:"how-to-reference-a-context",children:"How to reference a Context"}),"\n",(0,o.jsxs)(r.p,{children:["Contexts can be referenced from any ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," as follows:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"  ---\n  apiVersion: terraform.appvia.io/v1alpha1\n  kind: Configuration\n  metadata:\n    name: bucket\n  spec:\n    module: https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v3.10.1\n    providerRef:\n      name: aws\n    valueFrom:\n      - context: default # context to be used\n        key: vpc_id\n        name: vpc_id\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"spec.valueFrom"})," field in the Configuration CRD requires the name of the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," resource, the ",(0,o.jsx)(r.em,{children:"key"})," being the name of the variable within the context, and the ",(0,o.jsx)(r.em,{children:"name"})," representing the variable as it will be presented to the Terraform module. The ",(0,o.jsx)(r.em,{children:"optional"})," field implies that both the context and any value reference can be omitted without causing a failure. By default, if either the context or the value is missing, the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/configurations.terraform.appvia.io",children:"Configuration"})," will be deferred until they are present."]}),"\n",(0,o.jsx)(r.h2,{id:"utilizing-a-custom-preload",children:"Utilizing a Custom Preload"}),"\n",(0,o.jsx)(r.p,{children:"Terranetes comes preconfigured with a loader to extract details from the cloud vendor, but it may not contain all the necessary details. This can be addressed in two ways:"}),"\n",(0,o.jsxs)(r.p,{children:["a) A Configuration can reference multiple ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," resources, allowing to use additional details or values.\nb) Override the preload image in the controller and run a custom loader."]}),"\n",(0,o.jsx)(r.p,{children:"The first approach is straightforward and can be achieved through various means, including manual, CI, helm, and others."}),"\n",(0,o.jsxs)(r.p,{children:["The second option, overloading the controller's preload images, requires updating the ",(0,o.jsx)(r.code,{children:"--preload-image"})," argument. In the helm chart, this can be accomplished via:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"controller:\n  images:\n    preload: IMAGE:TAG\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Note that the entrypoint when using this image is currently hardcoded, ensuring an executable at ",(0,o.jsx)(r.code,{children:"/bin/preload"}),". The following arguments will also be passed, via environment variables, to the execution:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"CLOUD"})," is the cloud vendor designation from the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," the preload is configured on, i.e., ",(0,o.jsx)(r.code,{children:"spec.provider"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"CLUSTER"})," is the cluster name from the preload configuration, i.e., ",(0,o.jsx)(r.code,{children:"spec.preload.cluster"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"CONTEXT"})," is the name of the context (",(0,o.jsx)(r.code,{children:"spec.preload.context"}),") defined in the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," configuration."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"PROVIDER"})," is the name of the provider the preload was configured on, ",(0,o.jsx)(r.code,{children:"metadata.name"})," on the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," resource."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"REGION"})," is the cloud region configured in the ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," preload configuration, i.e., ",(0,o.jsx)(r.code,{children:"spec.preload.region"}),"."]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"When utilizing a custom loader, the executable is responsible for two primary tasks:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Retrieving the cloud details and constructing a valid ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/contexts.terraform.appvia.io",children:"Context"})," resource."]}),"\n",(0,o.jsxs)(r.li,{children:["Creating or updating the ",(0,o.jsx)(r.code,{children:"CONTEXT"})," in the Kubernetes cluster itself."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["The controller is responsible for ensuring the execution occurs, handling job failures, and configuring the job with ",(0,o.jsx)(r.a,{href:"/terranetes-controller/reference/providers.terraform.appvia.io",children:"Provider"})," credentials."]})]})}function h(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65:function(e,r,n){n.d(r,{Z:function(){return s},a:function(){return a}});var t=n(7294);let o={},i=t.createContext(o);function a(e){let r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);